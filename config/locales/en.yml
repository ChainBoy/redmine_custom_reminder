en:
  mail_custom_reminder_subject: "[Redmine Custom Reminder] %{count} назначенных на Вас задач"
  label_custom_reminders_plural: 'Custom Reminders'
  label_custom_reminder_new: "New custom reminder"
  label_custom_reminder_trigger_definition: "Custom Reminder definition"
  label_custom_reminders_user_type: 'User defined script'
  label_reminder_enabled_projects: 'Enabled for projects'
  label_trigger_updated_on: "Not updated %{count} days"
  label_schedule_custom_reminder: "Schedule email-notification"
  label_destroy_custom_reminder: "Destroy custom reminder"
  label_custom_reminder_to_author_and_watchers: "To assignee, author and watchers"

  field_trigger_type: 'Event that cause email-notify'
  field_notification_recipient: 'Target group to notify'
  field_trigger_script: 'Condition for triggering custom reminder'
  field_user_scope_script: 'Script for generating users scope'
  field_interval: 'Sending interval'

  permission_manage_project_custom_reminders: "Manage project's custom reminders"

  text_custom_reminder_user_scope_info: "Available variables: issues_list(Array), issues_hash(Hash, key is User object, value issues_list), projects(Array)"
  text_custom_reminder_trigger_info: "Available variables: issues_list(Array), issues_hash(Hash, key is User object, value issues_list), projects(Array)"
  text_custom_reminder_trigger_example: |
    Issue.open.where(project: projects).each do |issue|
      issues_list << issue if issue.updated_on <= trigger_param.day.until(Date.today)
    end
  text_custom_reminder_user_scope_example: |
    issues_list.each do |issue|
      issues_hash[issue.assigned_to] ||= []
      issues_hash[issue.assigned_to] << issue
    end